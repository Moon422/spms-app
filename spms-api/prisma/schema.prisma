generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model University {
  id               String @id @default(uuid())
  universityName   String @unique @db.VarChar(255)
  universityDomain String @unique @db.VarChar(100)

  schools School[]
}

model School {
  id         String @id @default(uuid())
  schoolName String @db.VarChar(255)
  schoolCode String @db.VarChar(6)

  university   University @relation(fields: [universityID], references: [id])
  universityID String

  departments Department[]
}

model Department {
  id             String @id @default(uuid())
  departmentName String @db.VarChar(255)
  departmentCode String @db.VarChar(6)

  school   School @relation(fields: [schoolID], references: [id])
  schoolID String

  programs Program[]

  faculties Faculty[]
}

model Program {
  id           String @id @default(uuid())
  programName  String @db.VarChar(255)
  programCode  String @db.VarChar(6)
  totalCredits Int

  department   Department @relation(fields: [departmentID], references: [id])
  departmentID String

  courses Course[]

  students Student[]

  plos PLO[]
}

model Course {
  id           String @id @default(uuid())
  courseName   String @db.VarChar(255)
  courseCode   String @db.VarChar(6)
  courseCredit Int

  coOffered   Course? @relation("cooffered", fields: [coOfferedID], references: [id])
  coOfferedID String

  coOfferedWith Course[] @relation("cooffered")

  program   Program @relation(fields: [programID], references: [id])
  programID String

  prerequisites   Course[] @relation("prerequisite")
  prerequisitesTo Course[] @relation("prerequisite")

  sections Section[]

  cos CO[]
}

enum Semester {
  SPRING
  SUMMER
  AUTUMN
}

model Section {
  id              String   @id @default(uuid())
  sectionNumber   Int
  semester        Semester
  year            Int
  maximumCapacity Int

  faculty   Faculty @relation(fields: [facultyID], references: [id])
  facultyID String

  course   Course @relation(fields: [courseID], references: [id])
  courseID String

  courseRegistrations CourseRegistration[]

  assessments Assessment[]
}

model CourseRegistration {
  student   Student @relation(fields: [studentID], references: [id])
  studentID String

  section   Section @relation(fields: [sectionID], references: [id])
  sectionID String

  registrationDate DateTime @db.Date

  @@id([studentID, sectionID])
}

enum AssessmentType {
  CLASS_TEST
  MID_TERM
  FINAL_TERM
  PROJECT
  ASSIGNMENT
}

model Assessment {
  id             String         @id @default(uuid())
  questionNumber Int
  assessmentType AssessmentType
  totalMarks     Float

  section   Section @relation(fields: [sectionID], references: [id])
  sectionID String

  co   CO     @relation(fields: [coID], references: [id])
  coID String

  evaluations Evaluation[]
}

model Evaluation {
  student   Student @relation(fields: [studentID], references: [id])
  studentID String

  assessment   Assessment @relation(fields: [assessmentID], references: [id])
  assessmentID String

  obtainedMark Float

  @@id([studentID, assessmentID])
}

model PLO {
  id         String @id @default(uuid())
  ploNumber  Int
  ploDetails String @db.VarChar(512)

  program   Program @relation(fields: [programID], references: [id])
  programID String

  cos CO[]
}

model CO {
  id        String @id @default(uuid())
  coNumber  Int
  coDetails String @db.VarChar(512)

  course   Course @relation(fields: [courseID], references: [id])
  courseID String

  plo   PLO    @relation(fields: [ploID], references: [id])
  ploID String

  assessments Assessment[]
}

enum UserType {
  SUPER_ADMIN
  UGCIEB
  UNIVERSITY_ADMIN
  VC
  DEAN
  DEPT_HEAD
  FACULTY
  STUDENT
}

model User {
  id          String   @id @default(uuid())
  firstName   String   @db.VarChar(55)
  lastName    String   @db.VarChar(55)
  email       String   @unique @db.VarChar(55)
  phone       String   @unique @db.Char(14)
  house       String?  @db.VarChar(30)
  street      String?  @db.VarChar(100)
  town        String   @db.VarChar(100)
  city        String   @db.VarChar(100)
  dateOfBirth DateTime @db.Date
  joiningDate DateTime @db.Date
  userType    UserType

  student    Student?
  faculty    Faculty?
  superAdmin SuperAdmin?

  auth Auth?
}

model Student {
  id        String @id @default(uuid())
  studentID String @db.VarChar(20)

  user   User   @relation(fields: [userID], references: [id])
  userID String @unique

  program   Program @relation(fields: [programID], references: [id])
  programID String

  courseRegistrations CourseRegistration[]

  evaluations Evaluation[]
}

model Faculty {
  id        String @id @default(uuid())
  facultyID String @db.VarChar(20)

  user   User   @relation(fields: [userID], references: [id])
  userID String @unique

  department   Department @relation(fields: [departmentID], references: [id])
  departmentID String

  courseSections Section[]
}

model SuperAdmin {
  id             String @id @default(uuid())
  organizationID String @db.VarChar(20)

  user   User   @relation(fields: [userID], references: [id])
  userID String @unique
}

model Auth {
  id       String @id @default(uuid())
  email    String @unique
  password String

  user   User   @relation(fields: [userID], references: [id])
  userID String @unique
}
